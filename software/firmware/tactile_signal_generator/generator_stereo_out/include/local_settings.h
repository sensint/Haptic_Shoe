#ifndef __SENSINT_SETTINGS_H__
#define __SENSINT_SETTINGS_H__

#include <string>
#include <vector>

namespace sensint {
namespace settings {
namespace local {
namespace defaults {

// I2C
#if SENSINT_ORIENTATION == 0  // vertical
static constexpr sensint::communication::Devices kI2C = sensint::communication::Devices::kPD1;
#else   // horizontal
static constexpr sensint::communication::Devices kI2C = sensint::communication::Devices::kPD2;
#endif  // SENSINT_ORIENTATION
}  // namespace defaults

static auto i2c_address = defaults::kI2C;

#ifdef SENSINT_PARALLEL_DATA
namespace pins {
static constexpr std::array<uint8_t, 4> kSequence{0, 1, 2, 3};
static constexpr uint8_t kAugmentation = 4;
}  // namespace pins
#endif  // SENSINT_PARALLEL_DATA

namespace presets {
//! preset materials for the pilot study
static const std::vector<std::string> kMaterials{
    // material 1: sine wave - grain - 170Hz (resonance frequency) - 100% - 11.74ms (2 cycles)
    "0,48,6,1,0,0,170,1.0,11764",
    // material 2: sine wave - continuous vib. - 170Hz (resonance frequency) - 100%
    "0,48,6,2,1,0,170,1.0,11764",
    // material 3: sine wave - grain - 170Hz (resonance frequency) - 100% - 50ms
    "0,48,6,3,0,0,170,1.0,50000",
    // material 4: square wave - grain - 200Hz - 100% - 5ms
    "0,48,6,4,0,2,200,1.0,5000",
    // material 5: sine wave - grain - 42Hz - 40% - 42ms
    "0,48,6,5,0,0,42,0.4,42000",
    // material 6: square wave - grain - 170Hz - 70% - 12ms
    "0,48,6,6,0,2,170,0.7,12000",
    // material 7: sawtooth inverse wave - grain - 90Hz - 100% - 23ms
    "0,48,6,7,0,6,90,0.8,23000"};
//! preset sequences for the pilot study
static const std::vector<std::string> kSequences{
    // =============== material 1 ===============
    // dense sequence (20 grains)
    "<0,54,20,1,1,25,25,1,50,50,1,75,75,1,100,100,1,125,125,1,150,150,1,175,175,1,200,200,1,225,"
    "225,1,250,250,1,275,275,1,300,300,1,325,325,1,350,350,1,375,375,1,400,400,1,425,425,1,450,450,"
    "1,475,475,1,500,500>",
    // dense sequence (50 grains)
    "<0,54,50,2,1,10,10,1,20,20,1,30,30,1,40,40,1,50,50,1,60,60,1,70,70,1,80,80,1,90,90,1,100,100,"
    "1,110,110,1,120,120,1,130,130,1,140,140,1,150,150,1,160,160,1,170,170,1,180,180,1,190,190,1,"
    "200,200,1,210,210,1,220,220,1,230,230,1,240,240,1,250,250,1,260,260,1,270,270,1,280,280,1,290,"
    "290,1,300,300,1,310,310,1,320,320,1,330,330,1,340,340,1,350,350,1,360,360,1,370,370,1,380,380,"
    "1,390,390,1,400,400,1,410,410,1,420,420,1,430,430,1,440,440,1,450,450,1,460,460,1,470,470,1,"
    "480,480,1,490,490,1,500,500>",
    // continuous vib. at upper sensor range
    "<0,54,7,3,1,50,50,1,100,100,1,150,150,1,200,200,1,250,250,2,300,450,1,500,500>",
    // continuous vib. at lower sensor range
    "<0,54,7,4,1,50,50,1,100,100,2,150,300,1,350,350,1,400,400,1,450,450,1,500,500>",
    // sparse sequence
    "<0,54,5,5,1,100,100,1,200,200,1,300,300,1,400,400,1,500,500>",

    // =============== material 3 ===============
    // dense sequence (20 grains)
    "<0,54,20,6,3,25,25,3,50,50,3,75,75,3,100,100,3,125,125,3,150,150,3,175,175,3,200,200,3,225,"
    "225,3,250,250,3,275,275,3,300,300,3,325,325,3,350,350,3,375,375,3,400,400,3,425,425,3,450,450,"
    "3,475,475,3,500,500>",
    // dense sequence (50 grains)
    "<0,54,50,7,3,10,10,3,20,20,3,30,30,3,40,40,3,50,50,3,60,60,3,70,70,3,80,80,3,90,90,3,100,100,"
    "3,110,110,3,120,120,3,130,130,3,140,140,3,150,150,3,160,160,3,170,170,3,180,180,3,190,190,3,"
    "200,200,3,210,210,3,220,220,3,230,230,3,240,240,3,250,250,3,260,260,3,270,270,3,280,280,3,290,"
    "290,3,300,300,3,310,310,3,320,320,3,330,330,3,340,340,3,350,350,3,360,360,3,370,370,3,380,380,"
    "3,390,390,3,400,400,3,410,410,3,420,420,3,430,430,3,440,440,3,450,450,3,460,460,3,470,470,3,"
    "480,480,3,490,490,3,500,500>",
    // continuous vib. at upper sensor range
    "<0,54,7,8,3,50,50,3,100,100,3,150,150,3,200,200,3,250,250,2,300,450,3,500,500>",
    // continuous vib. at lower sensor range
    "<0,54,7,9,3,50,50,3,100,100,2,150,300,3,350,350,3,400,400,3,450,450,3,500,500>",
    // sparse sequence
    "<0,54,5,10,3,100,100,3,200,200,3,300,300,3,400,400,3,500,500>",

    // =============== organic sequences ===============
    "<0,54,20,11,5,40,40,7,65,65,4,85,85,6,103,103,5,196,196,4,244,244,6,275,275,7,276,276,6,285,"
    "285,6,298,298,4,332,332,7,347,347,5,356,356,4,357,357,6,358,358,4,392,392,7,440,440,5,443,443,"
    "7,465,465,4,481,481>"};
// static const std::vector<std::string> kMaterials{
//     "0,48,6,1,0,1,60,1.0,10000",   "0,48,6,2,0,1,60,1.0,100000",
//     "0,48,6,3,1,1,60,1.0,10000",   "0,48,6,4,1,1,60,1.0,100000",

//     "0,48,6,5,0,1,110,1.0,10000",  "0,48,6,6,0,1,110,1.0,100000",
//     "0,48,6,7,1,1,110,1.0,10000",  "0,48,6,8,1,1,110,1.0,100000",

//     "0,48,6,9,0,1,170,1.0,10000",  "0,48,6,10,0,1,170,1.0,100000",
//     "0,48,6,11,1,1,170,1.0,10000", "0,48,6,12,1,1,170,1.0,100000"};
// static const std::vector<std::string> kSequences{
//     "0,54,4,1,1,100,100,2,200,200,5,300,300,6,400,400",
//     "0,54,4,2,1,100,100,1,200,200,1,300,300,1,400,400",
//     "0,54,4,3,2,100,100,2,200,200,2,300,300,2,400,400",
//     "0,54,4,4,2,100,100,2,200,200,3,250,350,2,400,400",
//     "0,54,4,5,5,100,100,6,200,200,9,300,300,10,400,400",
//     "0,54,4,6,9,100,100,9,200,200,9,300,300,9,400,400",
//     "0,54,4,7,10,100,100,10,200,200,10,300,300,10,400,400",
//     "0,54,4,8,2,100,100,2,200,200,3,250,350,2,400,400",
//     "0,54,4,8,5,100,100,5,200,200,7,250,350,5,400,400"};
}  // namespace presets

}  // namespace local
}  // namespace settings
}  // namespace sensint

#endif  // __SENSINT_SETTINGS_H__
